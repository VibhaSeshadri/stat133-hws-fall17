semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#creating barplot of these expsenses
expense_plot <- barplot(expenses)
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#adding numerical labels to the top of the barplot
text(expense_plot, labels = expenses)
# variables
cell_phone <- 80
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
# total expenses
total <- cell_phone + transportation + groceries + gym + rent + other
#semester expenses
semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#creating barplot of these expsenses
expense_plot <- barplot(expenses)
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#adding numerical labels to the top of the barplot
text(expense_plot, pos = 3, labels = expenses)
# variables
cell_phone <- 80
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
# total expenses
total <- cell_phone + transportation + groceries + gym + rent + other
#semester expenses
semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#creating barplot of these expsenses
expense_plot <- barplot(expenses)
#adding numerical labels to the top of the barplot
text(expense_plot, pos = 3, labels = expenses)
# variables
cell_phone <- 80
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
# total expenses
total <- cell_phone + transportation + groceries + gym + rent + other
#semester expenses
semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#creating barplot of these expsenses
expense_plot <- barplot(expenses)
#adding numerical labels to the top of the barplot
text(expense_plot, pos = 3, labels = expenses, offset = 0.5)
# variables
cell_phone <- 80
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
# total expenses
total <- cell_phone + transportation + groceries + gym + rent + other
#semester expenses
semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#creating barplot of these expsenses
expense_plot <- barplot(expenses)
#adding numerical labels to the top of the barplot
text(expense_plot, pos = 3, labels = expenses)
# variables
cell_phone <- 80
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
# total expenses
total <- cell_phone + transportation + groceries + gym + rent + other
#semester expenses
semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#creating barplot of these expsenses
expense_plot <- barplot(expenses)
#adding numerical labels to the top of the barplot
text(expense_plot, expenses, pos = 3, labels = expenses)
?barplot
# variables
cell_phone <- 80
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
# total expenses
total <- cell_phone + transportation + groceries + gym + rent + other
#semester expenses
semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#creating barplot of these expsenses
expense_plot <- barplot(expenses, ylim = 1500)
# variables
cell_phone <- 80
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
# total expenses
total <- cell_phone + transportation + groceries + gym + rent + other
#semester expenses
semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#creating barplot of these expsenses
expense_plot <- barplot(expenses, ylim = 1500)
# variables
cell_phone <- 80
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
# total expenses
total <- cell_phone + transportation + groceries + gym + rent + other
#semester expenses
semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#creating barplot of these expsenses
expense_plot <- barplot(expenses)
#adding numerical labels to the top of the barplot
text(expense_plot, expenses, pos = 3, labels = expenses)
# variables
cell_phone <- 80
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
# total expenses
total <- cell_phone + transportation + groceries + gym + rent + other
#semester expenses
semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#creating barplot of these expsenses
expense_plot <- barplot(expenses, ylim = c(0,1500))
#adding numerical labels to the top of the barplot
text(expense_plot, expenses, pos = 3, labels = expenses)
# variables
cell_phone <- 80
transportation <- 20
groceries <- 527
gym <- 10
rent <- 1500
other <- 83
# total expenses
total <- cell_phone + transportation + groceries + gym + rent + other
#semester expenses
semester_expenses <- total*5
#year expenses
year_expensees <- semester_expenses * 2
#your vector expenses
expenses <- c(cell_phone, transportation, groceries, gym, rent, other)
#mapping string objects to be "keys" of the numerical values inputted into expenses
names(expenses) <- c("cell phone", "transportation","groceries","gym", "rent", "other")
#sorting the variables in expenses to create a bar chart in decreasing order
expenses <- sort(expenses, decreasing = TRUE)
#creating barplot of these expsenses
expense_plot <- barplot(expenses, ylim = c(0,2000))
#adding numerical labels to the top of the barplot
text(expense_plot, expenses, pos = 3, labels = expenses)
?Arithmetic
?sqrt
# defining legs a and b
a <- 3
b <- 4
#calculating the length of the hypotenuse, c
c <- sqrt((a^2+b^2))
# defining legs a and b
a <- 3
b <- 4
#calculating the length of the hypotenuse, c
c <- sqrt((a^2+b^2))
# defining legs a and b
a <- 3
b <- 4
#calculating the length of the hypotenuse, c
c <- sqrt((a^2+b^2))
# defining legs a and b
a <- 3
b <- 4
#calculating the length of the hypotenuse, c
c <- sqrt((a^2+b^2))
# n refers to the number of trials or combinations in this problem.
n <- factorial(5)/(factorial(2)*factorial(3))
# n refers to the number of trials or combinations in this problem.
n <- factorial(5)/(factorial(2)*factorial(3))
#complete the same computations as above using choose() instead of factorial()
n <- choose(n = 5, k = 2)
# n refers to the number of trials or combinations in this problem.
n <- factorial(5)/(factorial(2)*factorial(3))
#complete the same computations as above using choose() instead of factorial()
n <- choose(n = 5, k = 2)
# n refers to the number of trials or combinations in this problem.
#n <- factorial(5)/(factorial(2)*factorial(3))
#complete the same computations as above using choose() instead of factorial()
n <- choose(n = 5, k = 2)
??binomial
# n refers to the number of trials, k refers to the number of successes, p refers to the probability of success
n <- 5
k <- 2
p <- (0.5)
# using factorials to calculate "n choose k"
combo <- factorial(n)/(factorial(k)*factorial(n-k))
# applying the binomial formula using factorial to calculate the probability of getting exactly 2 heads out of 5 tosses
prob_two_fact <- combo*(p^2)*(1-p)^(n-k)
# calculating the same probability as above, but using choose() instead of factorial()
prob_two_choose <- choose(n = n, k = k)*(p^2)*(1-p)^(n-k)
# calculating prob_two_fact/choose using dbinom
prob_two_dbinom = dbinom(k, n, p, log = FALSE)
# using dbinom calculating probability of 2 heads in 5 rolls using a biased coin
prob_two_biased = dbinom(k, n, 0.35, log = FALSE)
# using dbinom calculating probability of <3 heads in 5 rolls using a biased coin
prob_greater_dbinom = dbinom(4:5, n, 0.35, log = FALSE)
# n refers to the number of trials, k refers to the number of successes, p refers to the probability of success
n <- 5
k <- 2
p <- (0.5)
# using factorials to calculate "n choose k"
combo <- factorial(n)/(factorial(k)*factorial(n-k))
# applying the binomial formula using factorial to calculate the probability of getting exactly 2 heads out of 5 tosses
prob_two_fact <- combo*(p^2)*(1-p)^(n-k)
# calculating the same probability as above, but using choose() instead of factorial()
prob_two_choose <- choose(n = n, k = k)*(p^2)*(1-p)^(n-k)
# calculating prob_two_fact/choose using dbinom
prob_two_dbinom = dbinom(k, n, p, log = FALSE)
# using dbinom calculating probability of 2 heads in 5 rolls using a biased coin
prob_two_biased = dbinom(k, n, 0.35, log = FALSE)
# using dbinom calculating probability of <3 heads in 5 rolls using a biased coin
prob_greater_dbinom = sum(dbinom(4:5, n, 0.35, log = FALSE))
rm(list = ls())
getwd()
rdata <- "https://github.com/ucb-stat133/stat133-fall-2017/raw/master/data/nba2017-salary-points.RData"
download.file(url = rdata, destfile = '~/Documents/berkeleyUG/fall2017/stat133/lab/lab2/nba2017-salary-points.RData')
help(class)
# check whether the loaded objects are atomic objects
is.atomic(salary)
help(seq)
help(rep)
help(seq)
help(seq)
help(which)
player[position == "Center" & team == "GSW"]
player[position == "Center" & team == "GSW"]
# load data in your R session
load('nba2017-salary-points.RData')
ls()
# your code here
class(player)
class(team)
class(position)
class(salary)
class(points)
# your code here
# regarding player
length(player)
head(player)
tail(player)
summary(player)
# regarding team
length(team)
head(team)
tail(team)
summary(team)
# regarding position
length(position)
head(position)
tail(position)
summary(position)
# regarding salary
length(salary)
head(salary)
tail(salary)
summary(salary)
# regarding position
length(position)
head(position)
tail(position)
summary(position)
# check whether the loaded objects are vectors
is.vector(player)
# check whether the loaded objects are atomic objects
is.atomic(salary)
four <- player[1:4]
four[0]
four[-1]
four[-c(1, 2, 3)]
four[5]
four[c(1, 2, 2, 3, 3, 3)]
player[seq(2, length(player), by = 2)]
salary[seq(1, length(salary), by = 2)]
team[seq(5, length(team), by = 5)]
points[seq(10, length(points), by = 10)]
team[seq(length(team), 1)]
# dummy vector
a <- c(5, 6, 7, 8)
# logical subsetting
a[c(TRUE, FALSE, TRUE, FALSE)]
# your turn
four[c(TRUE, TRUE, TRUE, TRUE)]
four[c(TRUE, TRUE, FALSE, FALSE)]
four[c(FALSE, FALSE, TRUE, TRUE)]
four[c(TRUE, FALSE, TRUE, FALSE)]
four[c(FALSE, FALSE, FALSE, FALSE)]
# recycling
four[TRUE]
four[c(TRUE, FALSE)]
# elements greater than 6
a > 6
# elements different from 6
a != 6
points_four <- points[1:4]
# elements greater than 100
points_four[points_four > 100]
# elements less than 100
points_four[points_four < 100]
# elements less than or equal to 10
points_four[points_four <= 10]
# elements different from 10
points_four[points_four != 10]
# AND
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE
# OR
TRUE | TRUE
TRUE | FALSE
FALSE | FALSE
# NOT
!TRUE
!FALSE
player[position == "Center" & team == "GSW"]
player[position=="Center"]
player[position==]
head(position)
player[position == "C" & team == "GSW"]
player[team == "GSW" &  team == "LAL"]
player[team == "GSW" |  team == "LAL"]
player[position == "SG" | position == "PG" | team == "LAL"]
player[position == "SF" & team == "GSW" || team == "LAL"]
player[(position == "SF" & team == "GSW") & (position == "SF" & team == "LAL")]
player[(position == "SF" & team == "GSW") | (position == "SF" & team == "LAL")]
player[max(salary)]
head(salary)
player[Which.max(salary)]
player[which.max(salary)]
salary[position == "C" & which.max(salary)]
salary[which.max(salary) & position == "C"]
max(salary[position == "C"])
max(player[which.max(points)])
salary[which.max(points)]
player[which.max(points)]
player[which.max(points3)]
names(player)
warriors_player <- players[team == "GSW"]
warriors_player <- player[team == "GSW"]
warriors_salary["Andre Iguodala"]
warriors_salary["Andre Iguodala"]
warriors_salary["Andre Iguodala"]
warriors_player <- player[team == "GSW"]
warriors_salary <- salary[team == "GSW"]
warriors_points <- points[team == "GSW"]
names(warriors_salary) <- warriors_player
warriors_salary["Andre Iguodala"]
plot(points, salary)
plot(log_points, log_salary)
log_points <- log(points)
log_salary <- log(salary)
plot(log_points, log_salary)
plot(log_points, log_salary)
text(log_points, log_salary, labels = player)
text(log_points, log_salary, labels = abbreviate(player))
{plot(log_points, log_salary)
text(log_points, log_salary, labels = player)}
{plot(log_points, log_salary)
text(log_points, log_salary, labels = abbreviate(player))}
{plot(warriors_points, warriors_salary)
text(warriors_points, warriors_salary, labels = warriors_player)}
logWPoints = log(warriors_points)
logWSalary = log(warriors_salary)
{plot(logWPoints, logWSalary)
text(logWPoints, logWSalary, labels = warriors_player)}
logWPoints <-  log(warriors_points)
logWSalary <-  log(warriors_salary)
{plot(logWPoints, logWSalary)
text(logWPoints, logWSalary, labels = warriors_player)}
head(salary)
# your code here
salary_millions <- (1/1000000)salary
# your code here
salary_millions =  c(1/1000000) / salary
salary_millions =  c(1/1000000) / salary
# your code here
salary_millions =  salary/1000000
position_fac <- factor(position)
position_fac
table(position_fac)
# your colored scatterplot
plot(points, salary, col = position_fac)
x <- 1:8
dim(x) = c(2,2,2)
x
github <- 'https://github.com/ucb-stat133/stat133-hws-fall17/'
repo <- 'raw/master/warmup02/data/nba2017-salary-points.RData'
download.file(
url = paste0(github, repo),
destfile = "Documents/berkeleyUG/fall2017/stat133/homework/hw2")
getwd()
download.file(
url = paste0(github, repo),
destfile = "/Documents/berkeleyUG/fall2017/stat133/homework/hw2")
download.file(
url = paste0(github, repo),
destfile = "Documents/berkeleyUG/fall2017/stat133/homework/hw2/nba2017-salary-points.RData")
summary(salary)
load("nba2017-salary-points.RData")
ls()
summary(salary)
?mean
?quartiles
??quartiles
??standard deviation
??standarddeviation
getwd()
setwd(documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw01)
setwd(Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw01)
setwd(~/Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw01)
setwd(/Users/vibhaseshadri/Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw01)
setwd(Users/vibhaseshadri/Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw01)
?setwd
setwd("~/Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw01/reports")
getwd()
setwd("Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw01")
