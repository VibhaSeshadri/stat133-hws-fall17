test_that("mean is returned and NAs are removed when specified", {
expect_equal(get_average(c(6, 4, 2, 0, -2)), mean(c(6, 4, 2, 0, -2)))
expect_equal(get_average(c(6, 4, 2, 0)), mean(c(6, 4, 2, 0)))
expect_equal(get_average(c(6, 4, 2, 0, -2, NA)), NA)
expect_equal(get_average(c(6, 4, 2, 0, -2, NA), TRUE), mean(c(6, 4, 2, 0, -2)))
expect_equal(get_average(c(6, 4, 2, 0, NA), TRUE), mean(c(6, 4, 2, 0)))
})
context("testing get_median")
test_that("median is returned and NAs are removed when specified", {
expect_equal(get_median(c(5, 4, 3, 2, 1)), median(c(5, 4, 3, 2, 1)))
expect_equal(get_median(c(4, 3, 2, 1)), c(4, 3, 2, 1))
expect_equal(get_median(c(5, 4, 3, 2, 1, NA)), NA)
expect_equal(get_median(c(5, 4, 3, 2, 1, NA), TRUE), c(5, 4, 3, 2, 1))
expect_equal(get_median(c(4, 3, 2, 1, NA), TRUE), c(4, 3, 2, 1))
})
context("testing get_median")
test_that("median is returned and NAs are removed when specified", {
expect_equal(get_median(c(5, 4, 3, 2, 1)), median(c(5, 4, 3, 2, 1)))
expect_equal(get_median(c(4, 3, 2, 1)), median(c(4, 3, 2, 1)))
expect_equal(get_median(c(5, 4, 3, 2, 1, NA)), NA)
expect_equal(get_median(c(5, 4, 3, 2, 1, NA), TRUE), median(c(5, 4, 3, 2, 1)))
expect_equal(get_median(c(4, 3, 2, 1, NA), TRUE), median(c(4, 3, 2, 1)))
})
context("testing get_median")
test_that("median is returned and NAs are removed when specified", {
expect_equal(get_median(c(5, 4, 3, 2, 1)), median(c(5, 4, 3, 2, 1)))
expect_equal(get_median(c(4, 3, 2, 1)), median(c(4, 3, 2, 1)))
expect_equal(get_median(c(5, 4, 3, 2, 1, NA)), NA)
expect_equal(get_median(c(5, 4, 3, 2, 1, NA), TRUE),
median(c(5, 4, 3, 2, 1)))
expect_equal(get_median(c(4, 3, 2, 1, NA), TRUE), median(c(4, 3, 2, 1)))
})
quartile(c(1, 2, 3, 4), probs = 0.25)
quantile(c(1, 2, 3, 4), probs = 0.25)
quantile(c(1, 2, 3), probs = 0.25)
get_quartile1 <- function(vec, na.rm = FALSE) {
if (!is.numeric(vec)) {
stop("non-numeric argument")
}
if (na.rm == TRUE) {
vec <- remove_missing(vec)
} else if (na.rm == FALSE & any(is.na(vec))) {
return(NA)
}
unname(quantile(vec, probs = 0.25, na.rm))
}
context("testing get_quartile1")
test_that("quartile 1 is returned and NAs are removed when specified", {
expect_equal(get_quartile1(c(4, 3, 1, 2)), 1.75)
expect_equal(get_quartile1(c(0, 0, 0, 0)), 0)
with_na <- c(NA, NA, 1, 2, 3)
expect_equal(get_quartile1(with_na), NA)
expect_equal(get_quartile1(with_na, TRUE), 1.5)
})
get_quartile3 <- function(vec, na.rm = FALSE) {
if (!is.numeric(vec)) {
stop("non-numeric argument")
}
if (na.rm == TRUE) {
vec <- remove_missing(vec)
} else if (na.rm == FALSE & any(is.na(vec))) {
return(NA)
}
unname(quantile(vec, probs = 0.75, na.rm))
}
quantile(c(1, 2, 3, 4), probs = 0.75)
quantile(c(1, 2, 3), probs = 0.75)
context("testing get_quartile3")
test_that("quartile 3 is returned and NAs are removed when specified", {
expect_equal(get_quartile3(c(4, 3, 1, 2)), 3.25)
expect_equal(get_quartile3(c(0, 0, 0, 0)), 0)
with_na <- c(NA, NA, 1, 2, 3)
expect_equal(get_quartile3(with_na), NA)
expect_equal(get_quartile3(with_na, TRUE), 2.5)
})
count_missing <- function(vec) {
num_na <- 0
for (i in vec) {
if (is.na(i)) {
num_na <- num_na + 1
}
}
num_na
}
context("testing count_missing")
test_that("count_missing returns the correct number of NAs in input vector", {
expect_equal(c(1, 2, 3, 4), 0)
expect_equal(c(NA, NA, NA, NA), 4)
expect_equal(c("4", 5, TRUE, NA, NA), 2)
expect_equal(c(), 0)
})
expect_equal(c(1, 2, 3, 4), 0)
context("testing count_missing")
test_that("count_missing returns the correct number of NAs in input vector", {
expect_equal(count_missing(c(1, 2, 3, 4)), 0)
expect_equal(count_missing(c(NA, NA, NA, NA)), 4)
expect_equal(count_missing(c("4", 5, TRUE, NA, NA)), 2)
expect_equal(count_missing(c()), 0)
})
quantile(c(NA, 1, 2), probs = .1)
summary_stats <- function(vec) {
list("minimum" = get_minimum(vec, TRUE),
"maximum" = get_maximum(vec, TRUE),
"range" = get_range(vec, TRUE) ,
"percentile10" = get_percentile10(vec, TRUE),
"percentile90" = get_percentile90(vec, TRUE),
"median" = get_median(vec, TRUE),
"average" = get_average(vec, TRUE),
"stdev" = get_stdev(vec, TRUE),
"quartile1" = get_quartile1(vec, TRUE),
"quartile3" = get_quartile3(vec, TRUE),
"missing" = count_missing(vec))
}
context("testing summary_stats")
test_that("summary_stats returns the correct value", {
vec <- c(1, 2, 3, 4, 5, NA)
expect_equal(summary_stats(vec)$range, 4)
expect_equal(summary_stats(vec)$missing, 1)
expect_equal(summary_stats(vec)$median, 3)
expect_equal(summary_stats(vec)$average, 3)
})
summary_stats(c(1, 2, 3, 4, 5, NA))
print(summary_stats(c(1, 2, 3, 4, 5, NA)))
colnames(summary_stats(c(1, 2, 3, 4, 5, NA)))
summary_stats(c(1, 2, 3, 4, 5, NA))$names
summary_stats(c(1, 2, 3, 4, 5, NA))$attributes
summary_stats(c(1, 2, 3, 4, 5, NA))$attribute
names(summary_stats(c(1, 2, 3, 4, 5, NA)))
print_stats <- function(vec) {
lst <- summary_stats(vec)
str <- ""
for (i in 1:length(lst)) {
str <- paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i]),
sep = "\n")
}
str
}
lst <- summary_stats(c(1, 2, 3, 4, 5, NA))
lst
print_stats(lst)
summary_stats(c(1, 2, 3, 4, 4, NA))
lst
print_stats(lst)
print_stats <- function(lst) {
str <- ""
for (i in 1:length(lst)) {
str <- paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i]),
sep = "\n")
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- ""
for (i in 1:length(lst)) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
}
str
}
print_stats(lst)
print_stats(lst)
print_stats(lst)
print_stats <- function(lst) {
str <- printf("## %s : %.4f",
names(lst)[1], lst[1])
for (i in 2:length(lst)) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- sprintf("## %s : %.4f",
names(lst)[1], lst[1])
for (i in 2:length(lst)) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
}
str
}
print_stats <- function(lst) {
str <- sprintf("## %s : %.4f",
names(lst)[1], lst[1])
for (i in 2:length(lst)) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- sprintf("## %s : %.4f%n",
names(lst)[1], lst[1])
for (i in 2:length(lst)) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- cat(sprintf("## %s : %.4f",
names(lst)[1], lst[1]), sep = "\n")
for (i in 2:length(lst)) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- cat(sprintf(" ## %s : %.4f",
names(lst)[1], lst[1]), sep = "\n")
for (i in 2:length(lst)) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- cat(sprintf(" ## %s : %.4f",
names(lst)[1], lst[1]), sep = "\n")
for (i in 2:length(lst) - 1) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- cat(sprintf(" ## %s : %.4f",
names(lst)[1], lst[1]), sep = "\n")
for (i in 2:length(lst)) {
if (i != length(lst)) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
} else {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])))
}
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- format(cat(sprintf(" ## %s : %.4f",
names(lst)[1], lst[1]), sep = "\n"), justify = "centre")
for (i in 2:length(lst)) {
if (i != length(lst)) {
str <- format(cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n"), justify = "centre")
} else {
str <- format(cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i]))), justify = "centre")
}
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- format(cat(sprintf("## %s : %.4f",
names(lst)[1], lst[1])), justify = "centre")
for (i in 2:length(lst)) {
if (i != length(lst)) {
str <- format(cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i]))),
justify = "centre")
} else {
str <- format(cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i]))), justify = "centre")
}
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- format(cat(sprintf(" ## %s : %.4f",
names(lst)[1], lst[1]), sep = "\n"), justify = "centre")
for (i in 2:length(lst)) {
if (i != length(lst)) {
str <- format(cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n"), justify = "centre")
} else {
str <- format(cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i]))), justify = "centre")
}
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- cat(sprintf(" ## %s : %.4f",
names(lst)[1], lst[1]), sep = "\n")
for (i in 2:length(lst)) {
if (i != length(lst)) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
} else {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])))
}
}
str
}
print_stats(lst)
print_stats <- function(lst) {
str <- cat(sprintf(" ## %s : %.4f",
names(lst)[1], lst[1]), sep = "\n")
for (i in 2:length(lst)) {
if (i != length(lst)) {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])),
sep = "\n")
} else {
str <- cat(paste(str, sprintf("## %s : %.4f",
names(lst)[i], lst[i])))
}
}
str
}
print_stats(lst)
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[1]
gap_before <- paste0(names, rep(" ", 9 - nchar(names(lst)[i])))
value <- lst[i]
str <- sprintf("## %s : %.4f", gap_before, lst[i])
print(str)
}
}
print_stats(summary_stats(c(1, 2, 3, 4, NA)))
source('~/Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw04/code/functions.R', echo=TRUE)
print_stats(summary_stats(c(1, 2, 3, 4, NA)))
print_stats(summary_stats(c(1, 2, 3, 4, NA)))
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
gap_before <- paste0(names, rep(" ", 10 - nchar(names(lst)[i])))
value <- lst[i]
str <- sprintf("## %s : %.4f", gap_before, lst[i])
print(str)
}
}
print_stats(summary_stats(c(1, 2, 3, 4, NA)))
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
print(10 - nchar(names(lst)[i]))
gap_before <- paste0(names, rep(" ", 10 - nchar(names(lst)[i])))
value <- lst[i]
str <- sprintf("## %s : %.4f", gap_before, lst[i])
print(str)
}
}
print_stats(summary_stats(c(1, 2, 3, 4, NA)))
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
print(10 - nchar(names(lst)[i]))
gap_before <- paste0(names, rep(" ", 14 - nchar(names(lst)[i])))
value <- lst[i]
str <- sprintf("## %s : %.4f", gap_before, lst[i])
print(str)
}
}
print_stats(summary_stats(c(1, 2, 3, 4, NA)))
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
gap_before <- paste0(names, rep(" ", 14 - nchar(names(lst)[i])))
value <- lst[i]
print(sprintf("## %s : %.4f", gap_before, lst[i]))
}
}
print_stats(summary_stats(c(1, 2, 3, 4, NA)))
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
gap_before <- paste0(names, rep(" ", 14 - nchar(names(lst)[i])))
value <- lst[i]
print(sprintf("## %s : %.4f", gap_before, lst[i]))
}
}
print_stats(summary_stats(c(1, 2, 3, 4, NA)))
print_stats <- function(lst) {
for (i in 1:length(lst)) {
print(names(list))
hash <- "## "
names <- names(lst)[i]
gap_before <- paste0(rep(" ", 14 - nchar(names(lst)[i])), collapse = '')
value <- sprintf("%.4f", lst[i])
print(paste0("## ", names, gap_before, ":", value))
}
}
print_stats(summary_stats(c(1, 2, 3, 4, 5, NA)))
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
gap_before <- paste0(rep(" ", 14 - nchar(names(lst)[i])), collapse = '')
value <- sprintf("%.4f", lst[i])
print(paste0("## ", names, gap_before, ": ", value))
}
}
print_stats(summary_stats(c(1, 2, 3, 4, 5, NA)))
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
gap_before <- paste0(rep(" ", 13 - nchar(names(lst)[i])), collapse = '')
value <- sprintf("%.4f", lst[i])
print(paste0("## ", names, gap_before, ": ", value))
}
}
print_stats(summary_stats(c(1, 2, 3, 4, 5, NA)))
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
gap_before <- paste0(rep(" ", 12 - nchar(names(lst)[i])), collapse = '')
value <- sprintf("%.4f", lst[i])
print(paste0("## ", names, gap_before, ": ", value))
}
}
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
gap_before <- paste0(rep(" ", 12 - nchar(names(lst)[i])), collapse = '')
value <- sprintf("%.4f", lst[i])
print(paste0("## ", names, gap_before, ": ", value))
}
}
print_stats(summary_stats(c(1, 2, 3, 4, 5, NA)))
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
gap_before <- paste0(rep(" ", 12 - nchar(names(lst)[i])), collapse = '')
value <- sprintf("%.4f", lst[i])
print(paste0("## ", names, gap_before, ": ", value), noquote = TRUE)
}
}
print_stats(summary_stats(c(1, 2, 3, 4, 5, NA)))
??pasteo
??paste0
print_stats <- function(lst) {
for (i in 1:length(lst)) {
hash <- "## "
names <- names(lst)[i]
gap_before <- paste0(rep(" ", 12 - nchar(names(lst)[i])), collapse = '')
value <- sprintf("%.4f", lst[i])
print(noquote(paste0("## ", names, gap_before, ": ", value)))
}
}
??paste0
print_stats(summary_stats(c(1, 2, 3, 4, 5, NA)))
cat("HW1")
library(shiny); runApp('Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
cleanscores[,"HW1"]
runApp('Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
setwd("Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw04/code")
cleanscores[,input$histx]
runApp('~/Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
cleanscores[,input$histx]
cleanscores <- read_csv('../data/cleandata/cleanscores.csv')
cleanscores <- read_csv('../data/cleandata/cleanscores.csv')
cleanscores[,input$histx]
is.data.frame(cleanscores)
is.numeric(cleanscores[,"HW1"])
class(cleanscores[,"HW1"])
as.numeric(cleanscores[,"HW1"])
class(cleanscores$HW1)
cleanscores[,"HW1"]
cleanscores$HW1
as.vector(cleanscores[,"HW1"])
summary_stats(as.vector(cleanscores[,"HW1"]))
cleanscores[,"HW1"][1]
cleanscores[[,"HW1"]]
x <- cleanscores[,"HW1"]
x
as.vector(x)
unlist(x)
x[1]
x
typeof(x)
as.numeric(x)
as.numeric(unlist(x))
runApp('~/Documents/berkeleyUG/fall2017/stat133/stat133-hws-fall17/hw04/app/gradevis.R')
